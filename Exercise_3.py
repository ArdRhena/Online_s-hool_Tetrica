data = {
        'lesson': [1594663200, 1594666800],
        'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
        'tutor': [1594663290, 1594663430, 1594663443, 1594666473]
        }


def appearance(intervals):
    all_time = {}                       # создаю словарь для объект: время;
    for key, value in data.items():     # при помощи итерации получаю ключ: значение;    
        d = (key, value)                # кажую итерацию объявляю в переменную;
        time = value                    # переменной time присваиваю значение valie;
        ind_key = len(time)             # для дальнейшего цикла, считаю сколько элементов в time;
        inp = []                        # создаю список для значений входа; 
        ex = []                         # создаю список для значений выхода;
        for i in range(ind_key):        # при помощи цикла, фильтрую значения на выход и вход,
            if i % 2 == 0:              # каждый чётный добавляю в список выхода, каждый нечётный в список входа
                inp.append(value[i])
            else:
                ex.append(value[i])
        result = sum(ex) - sum(inp)     # нахожу сумму для каждого списка и определяю общее время для объекта
        all_time[key] = result          # добавляю в словарь all_time объект: время
    return all_time                     # возвращаю словарь в вызов функции


print(appearance(data))


# дописав функцию я понял, что нужно было получить время одновременного присутствия учителя и ученика на уроке...
# попробую реализовать это через интервалы и сравнения их, время конечно уже вышло, но всё же.
tests = [
    {'data': {'lesson': [1594663200, 1594666800],
             'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
             'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
     'answer': 3117
    },
    {'data': {'lesson': [1594702800, 1594706400],
             'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503, 1594706524, 1594706524, 1594706579, 1594706641],
             'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]},
    'answer': 3577
    },
    {'data': {'lesson': [1594692000, 1594695600],
             'pupil': [1594692033, 1594696347],
             'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
    'answer': 3565
    },
]

if __name__ == '__main__':
   for i, test in enumerate(tests):
       test_answer = appearance(test['data'])
       assert test_answer == test['answer'], f'Error on test case {i}, got {test_answer}, expected {test["answer"]}'
